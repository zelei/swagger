/*
 * codeBeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.demo;

import com.intland.swagger.ApiCallback;
import com.intland.swagger.ApiClient;
import com.intland.swagger.ApiException;
import com.intland.swagger.ApiResponse;
import com.intland.swagger.Configuration;
import com.intland.swagger.Pair;
import com.intland.swagger.ProgressRequestBody;
import com.intland.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AbstractField;
import org.openapitools.client.model.ChoiceOptionReference;
import org.openapitools.client.model.ResourceForbiddenException;
import org.openapitools.client.model.ResourceNotFoundException;
import org.openapitools.client.model.ResourceUnauthorizedException;
import org.openapitools.client.model.Tracker;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrackerApi {
    private ApiClient apiClient;

    public TrackerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrackerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for v2ProjectProjectIdTrackerGet
     * @param projectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2ProjectProjectIdTrackerGetCall(Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/project/{projectId}/tracker"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2ProjectProjectIdTrackerGetValidateBeforeCall(Integer projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling v2ProjectProjectIdTrackerGet(Async)");
        }
        

        com.squareup.okhttp.Call call = v2ProjectProjectIdTrackerGetCall(projectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get trackers
     * 
     * @param projectId  (required)
     * @return List&lt;Tracker&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Tracker> v2ProjectProjectIdTrackerGet(Integer projectId) throws ApiException {
        ApiResponse<List<Tracker>> resp = v2ProjectProjectIdTrackerGetWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * Get trackers
     * 
     * @param projectId  (required)
     * @return ApiResponse&lt;List&lt;Tracker&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Tracker>> v2ProjectProjectIdTrackerGetWithHttpInfo(Integer projectId) throws ApiException {
        com.squareup.okhttp.Call call = v2ProjectProjectIdTrackerGetValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<List<Tracker>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get trackers (asynchronously)
     * 
     * @param projectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2ProjectProjectIdTrackerGetAsync(Integer projectId, final ApiCallback<List<Tracker>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2ProjectProjectIdTrackerGetValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Tracker>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v2TrackerTrackerIdFieldCustomFieldIdGet
     * @param trackerId  (required)
     * @param fieldId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2TrackerTrackerIdFieldCustomFieldIdGetCall(Integer trackerId, Integer fieldId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/tracker/{trackerId}/field/custom/{fieldId}"
            .replaceAll("\\{" + "trackerId" + "\\}", apiClient.escapeString(trackerId.toString()))
            .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2TrackerTrackerIdFieldCustomFieldIdGetValidateBeforeCall(Integer trackerId, Integer fieldId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling v2TrackerTrackerIdFieldCustomFieldIdGet(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling v2TrackerTrackerIdFieldCustomFieldIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = v2TrackerTrackerIdFieldCustomFieldIdGetCall(trackerId, fieldId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get custom field of tracker
     * 
     * @param trackerId  (required)
     * @param fieldId  (required)
     * @return AbstractField
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractField v2TrackerTrackerIdFieldCustomFieldIdGet(Integer trackerId, Integer fieldId) throws ApiException {
        ApiResponse<AbstractField> resp = v2TrackerTrackerIdFieldCustomFieldIdGetWithHttpInfo(trackerId, fieldId);
        return resp.getData();
    }

    /**
     * Get custom field of tracker
     * 
     * @param trackerId  (required)
     * @param fieldId  (required)
     * @return ApiResponse&lt;AbstractField&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractField> v2TrackerTrackerIdFieldCustomFieldIdGetWithHttpInfo(Integer trackerId, Integer fieldId) throws ApiException {
        com.squareup.okhttp.Call call = v2TrackerTrackerIdFieldCustomFieldIdGetValidateBeforeCall(trackerId, fieldId, null, null);
        Type localVarReturnType = new TypeToken<AbstractField>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get custom field of tracker (asynchronously)
     * 
     * @param trackerId  (required)
     * @param fieldId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2TrackerTrackerIdFieldCustomFieldIdGetAsync(Integer trackerId, Integer fieldId, final ApiCallback<AbstractField> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2TrackerTrackerIdFieldCustomFieldIdGetValidateBeforeCall(trackerId, fieldId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractField>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v2TrackerTrackerIdFieldFieldIdGet
     * @param trackerId  (required)
     * @param fieldId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2TrackerTrackerIdFieldFieldIdGetCall(Integer trackerId, Integer fieldId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/tracker/{trackerId}/field/{fieldId}"
            .replaceAll("\\{" + "trackerId" + "\\}", apiClient.escapeString(trackerId.toString()))
            .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2TrackerTrackerIdFieldFieldIdGetValidateBeforeCall(Integer trackerId, Integer fieldId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling v2TrackerTrackerIdFieldFieldIdGet(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling v2TrackerTrackerIdFieldFieldIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = v2TrackerTrackerIdFieldFieldIdGetCall(trackerId, fieldId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get field of tracker
     * 
     * @param trackerId  (required)
     * @param fieldId  (required)
     * @return AbstractField
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractField v2TrackerTrackerIdFieldFieldIdGet(Integer trackerId, Integer fieldId) throws ApiException {
        ApiResponse<AbstractField> resp = v2TrackerTrackerIdFieldFieldIdGetWithHttpInfo(trackerId, fieldId);
        return resp.getData();
    }

    /**
     * Get field of tracker
     * 
     * @param trackerId  (required)
     * @param fieldId  (required)
     * @return ApiResponse&lt;AbstractField&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractField> v2TrackerTrackerIdFieldFieldIdGetWithHttpInfo(Integer trackerId, Integer fieldId) throws ApiException {
        com.squareup.okhttp.Call call = v2TrackerTrackerIdFieldFieldIdGetValidateBeforeCall(trackerId, fieldId, null, null);
        Type localVarReturnType = new TypeToken<AbstractField>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get field of tracker (asynchronously)
     * 
     * @param trackerId  (required)
     * @param fieldId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2TrackerTrackerIdFieldFieldIdGetAsync(Integer trackerId, Integer fieldId, final ApiCallback<AbstractField> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2TrackerTrackerIdFieldFieldIdGetValidateBeforeCall(trackerId, fieldId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractField>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v2TrackerTrackerIdFieldFieldIdOptionOptionIdGet
     * @param trackerId  (required)
     * @param fieldId  (required)
     * @param optionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2TrackerTrackerIdFieldFieldIdOptionOptionIdGetCall(Integer trackerId, Integer fieldId, Integer optionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/tracker/{trackerId}/field/{fieldId}/option/{optionId}"
            .replaceAll("\\{" + "trackerId" + "\\}", apiClient.escapeString(trackerId.toString()))
            .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()))
            .replaceAll("\\{" + "optionId" + "\\}", apiClient.escapeString(optionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2TrackerTrackerIdFieldFieldIdOptionOptionIdGetValidateBeforeCall(Integer trackerId, Integer fieldId, Integer optionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling v2TrackerTrackerIdFieldFieldIdOptionOptionIdGet(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling v2TrackerTrackerIdFieldFieldIdOptionOptionIdGet(Async)");
        }
        
        // verify the required parameter 'optionId' is set
        if (optionId == null) {
            throw new ApiException("Missing the required parameter 'optionId' when calling v2TrackerTrackerIdFieldFieldIdOptionOptionIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = v2TrackerTrackerIdFieldFieldIdOptionOptionIdGetCall(trackerId, fieldId, optionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get option of a choice field of tracker
     * 
     * @param trackerId  (required)
     * @param fieldId  (required)
     * @param optionId  (required)
     * @return ChoiceOptionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChoiceOptionReference v2TrackerTrackerIdFieldFieldIdOptionOptionIdGet(Integer trackerId, Integer fieldId, Integer optionId) throws ApiException {
        ApiResponse<ChoiceOptionReference> resp = v2TrackerTrackerIdFieldFieldIdOptionOptionIdGetWithHttpInfo(trackerId, fieldId, optionId);
        return resp.getData();
    }

    /**
     * Get option of a choice field of tracker
     * 
     * @param trackerId  (required)
     * @param fieldId  (required)
     * @param optionId  (required)
     * @return ApiResponse&lt;ChoiceOptionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChoiceOptionReference> v2TrackerTrackerIdFieldFieldIdOptionOptionIdGetWithHttpInfo(Integer trackerId, Integer fieldId, Integer optionId) throws ApiException {
        com.squareup.okhttp.Call call = v2TrackerTrackerIdFieldFieldIdOptionOptionIdGetValidateBeforeCall(trackerId, fieldId, optionId, null, null);
        Type localVarReturnType = new TypeToken<ChoiceOptionReference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get option of a choice field of tracker (asynchronously)
     * 
     * @param trackerId  (required)
     * @param fieldId  (required)
     * @param optionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2TrackerTrackerIdFieldFieldIdOptionOptionIdGetAsync(Integer trackerId, Integer fieldId, Integer optionId, final ApiCallback<ChoiceOptionReference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2TrackerTrackerIdFieldFieldIdOptionOptionIdGetValidateBeforeCall(trackerId, fieldId, optionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChoiceOptionReference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v2TrackerTrackerIdFieldGet
     * @param trackerId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2TrackerTrackerIdFieldGetCall(Integer trackerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/tracker/{trackerId}/field"
            .replaceAll("\\{" + "trackerId" + "\\}", apiClient.escapeString(trackerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2TrackerTrackerIdFieldGetValidateBeforeCall(Integer trackerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling v2TrackerTrackerIdFieldGet(Async)");
        }
        

        com.squareup.okhttp.Call call = v2TrackerTrackerIdFieldGetCall(trackerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get fields of tracker
     * 
     * @param trackerId  (required)
     * @return List&lt;AbstractField&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AbstractField> v2TrackerTrackerIdFieldGet(Integer trackerId) throws ApiException {
        ApiResponse<List<AbstractField>> resp = v2TrackerTrackerIdFieldGetWithHttpInfo(trackerId);
        return resp.getData();
    }

    /**
     * Get fields of tracker
     * 
     * @param trackerId  (required)
     * @return ApiResponse&lt;List&lt;AbstractField&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AbstractField>> v2TrackerTrackerIdFieldGetWithHttpInfo(Integer trackerId) throws ApiException {
        com.squareup.okhttp.Call call = v2TrackerTrackerIdFieldGetValidateBeforeCall(trackerId, null, null);
        Type localVarReturnType = new TypeToken<List<AbstractField>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get fields of tracker (asynchronously)
     * 
     * @param trackerId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2TrackerTrackerIdFieldGetAsync(Integer trackerId, final ApiCallback<List<AbstractField>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2TrackerTrackerIdFieldGetValidateBeforeCall(trackerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AbstractField>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v2TrackerTrackerIdGet
     * @param trackerId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2TrackerTrackerIdGetCall(Integer trackerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/tracker/{trackerId}"
            .replaceAll("\\{" + "trackerId" + "\\}", apiClient.escapeString(trackerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2TrackerTrackerIdGetValidateBeforeCall(Integer trackerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling v2TrackerTrackerIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = v2TrackerTrackerIdGetCall(trackerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get tracker
     * 
     * @param trackerId  (required)
     * @return Tracker
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Tracker v2TrackerTrackerIdGet(Integer trackerId) throws ApiException {
        ApiResponse<Tracker> resp = v2TrackerTrackerIdGetWithHttpInfo(trackerId);
        return resp.getData();
    }

    /**
     * Get tracker
     * 
     * @param trackerId  (required)
     * @return ApiResponse&lt;Tracker&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Tracker> v2TrackerTrackerIdGetWithHttpInfo(Integer trackerId) throws ApiException {
        com.squareup.okhttp.Call call = v2TrackerTrackerIdGetValidateBeforeCall(trackerId, null, null);
        Type localVarReturnType = new TypeToken<Tracker>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get tracker (asynchronously)
     * 
     * @param trackerId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2TrackerTrackerIdGetAsync(Integer trackerId, final ApiCallback<Tracker> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2TrackerTrackerIdGetValidateBeforeCall(trackerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Tracker>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
