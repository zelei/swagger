/*
 * codeBeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.demo;

import com.intland.swagger.ApiCallback;
import com.intland.swagger.ApiClient;
import com.intland.swagger.ApiException;
import com.intland.swagger.ApiResponse;
import com.intland.swagger.Configuration;
import com.intland.swagger.Pair;
import com.intland.swagger.ProgressRequestBody;
import com.intland.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Comment;
import java.io.File;
import org.openapitools.client.model.InternalServerErrorException;
import org.openapitools.client.model.ResourceForbiddenException;
import org.openapitools.client.model.ResourceNotFoundException;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrackerItemsCommentApi {
    private ApiClient apiClient;

    public TrackerItemsCommentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrackerItemsCommentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for v2ItemItemIdCommentCommentIdDelete
     * @param itemId  (required)
     * @param commentId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2ItemItemIdCommentCommentIdDeleteCall(Integer itemId, Integer commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/item/{itemId}/comment/{commentId}"
            .replaceAll("\\{" + "itemId" + "\\}", apiClient.escapeString(itemId.toString()))
            .replaceAll("\\{" + "commentId" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2ItemItemIdCommentCommentIdDeleteValidateBeforeCall(Integer itemId, Integer commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling v2ItemItemIdCommentCommentIdDelete(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling v2ItemItemIdCommentCommentIdDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = v2ItemItemIdCommentCommentIdDeleteCall(itemId, commentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete comment of tracker item by id
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Comment v2ItemItemIdCommentCommentIdDelete(Integer itemId, Integer commentId) throws ApiException {
        ApiResponse<Comment> resp = v2ItemItemIdCommentCommentIdDeleteWithHttpInfo(itemId, commentId);
        return resp.getData();
    }

    /**
     * Delete comment of tracker item by id
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Comment> v2ItemItemIdCommentCommentIdDeleteWithHttpInfo(Integer itemId, Integer commentId) throws ApiException {
        com.squareup.okhttp.Call call = v2ItemItemIdCommentCommentIdDeleteValidateBeforeCall(itemId, commentId, null, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete comment of tracker item by id (asynchronously)
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2ItemItemIdCommentCommentIdDeleteAsync(Integer itemId, Integer commentId, final ApiCallback<Comment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2ItemItemIdCommentCommentIdDeleteValidateBeforeCall(itemId, commentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v2ItemItemIdCommentCommentIdGet
     * @param itemId  (required)
     * @param commentId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2ItemItemIdCommentCommentIdGetCall(Integer itemId, Integer commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/item/{itemId}/comment/{commentId}"
            .replaceAll("\\{" + "itemId" + "\\}", apiClient.escapeString(itemId.toString()))
            .replaceAll("\\{" + "commentId" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2ItemItemIdCommentCommentIdGetValidateBeforeCall(Integer itemId, Integer commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling v2ItemItemIdCommentCommentIdGet(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling v2ItemItemIdCommentCommentIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = v2ItemItemIdCommentCommentIdGetCall(itemId, commentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get comment of tracker item by id
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Comment v2ItemItemIdCommentCommentIdGet(Integer itemId, Integer commentId) throws ApiException {
        ApiResponse<Comment> resp = v2ItemItemIdCommentCommentIdGetWithHttpInfo(itemId, commentId);
        return resp.getData();
    }

    /**
     * Get comment of tracker item by id
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Comment> v2ItemItemIdCommentCommentIdGetWithHttpInfo(Integer itemId, Integer commentId) throws ApiException {
        com.squareup.okhttp.Call call = v2ItemItemIdCommentCommentIdGetValidateBeforeCall(itemId, commentId, null, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get comment of tracker item by id (asynchronously)
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2ItemItemIdCommentCommentIdGetAsync(Integer itemId, Integer commentId, final ApiCallback<Comment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2ItemItemIdCommentCommentIdGetValidateBeforeCall(itemId, commentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v2ItemItemIdCommentCommentIdPost
     * @param itemId  (required)
     * @param commentId  (required)
     * @param comment Text of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to PlainText)
     * @param attachments Attachments of a comment (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2ItemItemIdCommentCommentIdPostCall(Integer itemId, Integer commentId, String comment, String commentFormat, File attachments, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/item/{itemId}/comment/{commentId}"
            .replaceAll("\\{" + "itemId" + "\\}", apiClient.escapeString(itemId.toString()))
            .replaceAll("\\{" + "commentId" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (comment != null) {
            localVarFormParams.put("comment", comment);
        }

        if (commentFormat != null) {
            localVarFormParams.put("commentFormat", commentFormat);
        }

        if (attachments != null) {
            localVarFormParams.put("attachments", attachments);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2ItemItemIdCommentCommentIdPostValidateBeforeCall(Integer itemId, Integer commentId, String comment, String commentFormat, File attachments, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling v2ItemItemIdCommentCommentIdPost(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling v2ItemItemIdCommentCommentIdPost(Async)");
        }
        

        com.squareup.okhttp.Call call = v2ItemItemIdCommentCommentIdPostCall(itemId, commentId, comment, commentFormat, attachments, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Reply on a comment of a tracker item
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @param comment Text of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to PlainText)
     * @param attachments Attachments of a comment (optional)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Comment v2ItemItemIdCommentCommentIdPost(Integer itemId, Integer commentId, String comment, String commentFormat, File attachments) throws ApiException {
        ApiResponse<Comment> resp = v2ItemItemIdCommentCommentIdPostWithHttpInfo(itemId, commentId, comment, commentFormat, attachments);
        return resp.getData();
    }

    /**
     * Reply on a comment of a tracker item
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @param comment Text of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to PlainText)
     * @param attachments Attachments of a comment (optional)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Comment> v2ItemItemIdCommentCommentIdPostWithHttpInfo(Integer itemId, Integer commentId, String comment, String commentFormat, File attachments) throws ApiException {
        com.squareup.okhttp.Call call = v2ItemItemIdCommentCommentIdPostValidateBeforeCall(itemId, commentId, comment, commentFormat, attachments, null, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Reply on a comment of a tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @param comment Text of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to PlainText)
     * @param attachments Attachments of a comment (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2ItemItemIdCommentCommentIdPostAsync(Integer itemId, Integer commentId, String comment, String commentFormat, File attachments, final ApiCallback<Comment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2ItemItemIdCommentCommentIdPostValidateBeforeCall(itemId, commentId, comment, commentFormat, attachments, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v2ItemItemIdCommentCommentIdPut
     * @param itemId  (required)
     * @param commentId  (required)
     * @param comment Text of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to PlainText)
     * @param attachments Attachments of a comment (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2ItemItemIdCommentCommentIdPutCall(Integer itemId, Integer commentId, String comment, String commentFormat, File attachments, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/item/{itemId}/comment/{commentId}"
            .replaceAll("\\{" + "itemId" + "\\}", apiClient.escapeString(itemId.toString()))
            .replaceAll("\\{" + "commentId" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (comment != null) {
            localVarFormParams.put("comment", comment);
        }

        if (commentFormat != null) {
            localVarFormParams.put("commentFormat", commentFormat);
        }

        if (attachments != null) {
            localVarFormParams.put("attachments", attachments);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2ItemItemIdCommentCommentIdPutValidateBeforeCall(Integer itemId, Integer commentId, String comment, String commentFormat, File attachments, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling v2ItemItemIdCommentCommentIdPut(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling v2ItemItemIdCommentCommentIdPut(Async)");
        }
        

        com.squareup.okhttp.Call call = v2ItemItemIdCommentCommentIdPutCall(itemId, commentId, comment, commentFormat, attachments, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Edit comment on a tracker item
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @param comment Text of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to PlainText)
     * @param attachments Attachments of a comment (optional)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Comment v2ItemItemIdCommentCommentIdPut(Integer itemId, Integer commentId, String comment, String commentFormat, File attachments) throws ApiException {
        ApiResponse<Comment> resp = v2ItemItemIdCommentCommentIdPutWithHttpInfo(itemId, commentId, comment, commentFormat, attachments);
        return resp.getData();
    }

    /**
     * Edit comment on a tracker item
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @param comment Text of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to PlainText)
     * @param attachments Attachments of a comment (optional)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Comment> v2ItemItemIdCommentCommentIdPutWithHttpInfo(Integer itemId, Integer commentId, String comment, String commentFormat, File attachments) throws ApiException {
        com.squareup.okhttp.Call call = v2ItemItemIdCommentCommentIdPutValidateBeforeCall(itemId, commentId, comment, commentFormat, attachments, null, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Edit comment on a tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param commentId  (required)
     * @param comment Text of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to PlainText)
     * @param attachments Attachments of a comment (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2ItemItemIdCommentCommentIdPutAsync(Integer itemId, Integer commentId, String comment, String commentFormat, File attachments, final ApiCallback<Comment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2ItemItemIdCommentCommentIdPutValidateBeforeCall(itemId, commentId, comment, commentFormat, attachments, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v2ItemItemIdCommentPost
     * @param itemId  (required)
     * @param comment Text of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to PlainText)
     * @param attachments Attachments of a comment (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2ItemItemIdCommentPostCall(Integer itemId, String comment, String commentFormat, File attachments, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/item/{itemId}/comment"
            .replaceAll("\\{" + "itemId" + "\\}", apiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (comment != null) {
            localVarFormParams.put("comment", comment);
        }

        if (commentFormat != null) {
            localVarFormParams.put("commentFormat", commentFormat);
        }

        if (attachments != null) {
            localVarFormParams.put("attachments", attachments);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2ItemItemIdCommentPostValidateBeforeCall(Integer itemId, String comment, String commentFormat, File attachments, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling v2ItemItemIdCommentPost(Async)");
        }
        

        com.squareup.okhttp.Call call = v2ItemItemIdCommentPostCall(itemId, comment, commentFormat, attachments, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Comment on a tracker item
     * 
     * @param itemId  (required)
     * @param comment Text of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to PlainText)
     * @param attachments Attachments of a comment (optional)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Comment v2ItemItemIdCommentPost(Integer itemId, String comment, String commentFormat, File attachments) throws ApiException {
        ApiResponse<Comment> resp = v2ItemItemIdCommentPostWithHttpInfo(itemId, comment, commentFormat, attachments);
        return resp.getData();
    }

    /**
     * Comment on a tracker item
     * 
     * @param itemId  (required)
     * @param comment Text of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to PlainText)
     * @param attachments Attachments of a comment (optional)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Comment> v2ItemItemIdCommentPostWithHttpInfo(Integer itemId, String comment, String commentFormat, File attachments) throws ApiException {
        com.squareup.okhttp.Call call = v2ItemItemIdCommentPostValidateBeforeCall(itemId, comment, commentFormat, attachments, null, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Comment on a tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param comment Text of a comment (optional)
     * @param commentFormat Format of a comment (optional, default to PlainText)
     * @param attachments Attachments of a comment (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2ItemItemIdCommentPostAsync(Integer itemId, String comment, String commentFormat, File attachments, final ApiCallback<Comment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2ItemItemIdCommentPostValidateBeforeCall(itemId, comment, commentFormat, attachments, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
