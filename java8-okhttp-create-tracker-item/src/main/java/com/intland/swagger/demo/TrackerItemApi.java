/*
 * codeBeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.demo;

import com.intland.swagger.ApiCallback;
import com.intland.swagger.ApiClient;
import com.intland.swagger.ApiException;
import com.intland.swagger.ApiResponse;
import com.intland.swagger.Configuration;
import com.intland.swagger.Pair;
import com.intland.swagger.ProgressRequestBody;
import com.intland.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BadRequestException;
import org.openapitools.client.model.CreateTrackerItem;
import org.openapitools.client.model.InternalServerErrorException;
import org.openapitools.client.model.ResourceForbiddenException;
import org.openapitools.client.model.ResourceNotFoundException;
import org.openapitools.client.model.TrackerItem;
import org.openapitools.client.model.TrackerItemSearchResult;
import org.openapitools.client.model.UpdateTrackerItem;
import org.openapitools.client.model.UpdateTrackerItemField;
import org.openapitools.client.model.UpdateTrackerItemTableField;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrackerItemApi {
    private ApiClient apiClient;

    public TrackerItemApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrackerItemApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for v2ItemGet
     * @param page  (required)
     * @param queryString  (required)
     * @param pageSize  (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Documentation of cbQL
     * @see <a href="https://codebeamer.com/cb/wiki/871101">Get tracker items by cbQL query string Documentation</a>
     */
    public com.squareup.okhttp.Call v2ItemGetCall(Integer page, String queryString, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/item";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (queryString != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("queryString", queryString));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2ItemGetValidateBeforeCall(Integer page, String queryString, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling v2ItemGet(Async)");
        }
        
        // verify the required parameter 'queryString' is set
        if (queryString == null) {
            throw new ApiException("Missing the required parameter 'queryString' when calling v2ItemGet(Async)");
        }
        

        com.squareup.okhttp.Call call = v2ItemGetCall(page, queryString, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get tracker items by cbQL query string
     * API can be called with a complex cbQL string to find tracker items
     * @param page  (required)
     * @param queryString  (required)
     * @param pageSize  (optional, default to 25)
     * @return TrackerItemSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Documentation of cbQL
     * @see <a href="https://codebeamer.com/cb/wiki/871101">Get tracker items by cbQL query string Documentation</a>
     */
    public TrackerItemSearchResult v2ItemGet(Integer page, String queryString, Integer pageSize) throws ApiException {
        ApiResponse<TrackerItemSearchResult> resp = v2ItemGetWithHttpInfo(page, queryString, pageSize);
        return resp.getData();
    }

    /**
     * Get tracker items by cbQL query string
     * API can be called with a complex cbQL string to find tracker items
     * @param page  (required)
     * @param queryString  (required)
     * @param pageSize  (optional, default to 25)
     * @return ApiResponse&lt;TrackerItemSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Documentation of cbQL
     * @see <a href="https://codebeamer.com/cb/wiki/871101">Get tracker items by cbQL query string Documentation</a>
     */
    public ApiResponse<TrackerItemSearchResult> v2ItemGetWithHttpInfo(Integer page, String queryString, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = v2ItemGetValidateBeforeCall(page, queryString, pageSize, null, null);
        Type localVarReturnType = new TypeToken<TrackerItemSearchResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get tracker items by cbQL query string (asynchronously)
     * API can be called with a complex cbQL string to find tracker items
     * @param page  (required)
     * @param queryString  (required)
     * @param pageSize  (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Documentation of cbQL
     * @see <a href="https://codebeamer.com/cb/wiki/871101">Get tracker items by cbQL query string Documentation</a>
     */
    public com.squareup.okhttp.Call v2ItemGetAsync(Integer page, String queryString, Integer pageSize, final ApiCallback<TrackerItemSearchResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2ItemGetValidateBeforeCall(page, queryString, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrackerItemSearchResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v2ItemItemIdDelete
     * @param itemId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2ItemItemIdDeleteCall(Integer itemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/item/{itemId}"
            .replaceAll("\\{" + "itemId" + "\\}", apiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2ItemItemIdDeleteValidateBeforeCall(Integer itemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling v2ItemItemIdDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = v2ItemItemIdDeleteCall(itemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete tracker item
     * 
     * @param itemId  (required)
     * @return TrackerItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerItem v2ItemItemIdDelete(Integer itemId) throws ApiException {
        ApiResponse<TrackerItem> resp = v2ItemItemIdDeleteWithHttpInfo(itemId);
        return resp.getData();
    }

    /**
     * Delete tracker item
     * 
     * @param itemId  (required)
     * @return ApiResponse&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerItem> v2ItemItemIdDeleteWithHttpInfo(Integer itemId) throws ApiException {
        com.squareup.okhttp.Call call = v2ItemItemIdDeleteValidateBeforeCall(itemId, null, null);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2ItemItemIdDeleteAsync(Integer itemId, final ApiCallback<TrackerItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2ItemItemIdDeleteValidateBeforeCall(itemId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v2ItemItemIdFieldPut
     * @param itemId  (required)
     * @param updateTrackerItemField  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2ItemItemIdFieldPutCall(Integer itemId, UpdateTrackerItemField updateTrackerItemField, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateTrackerItemField;

        // create path and map variables
        String localVarPath = "/v2/item/{itemId}/field"
            .replaceAll("\\{" + "itemId" + "\\}", apiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2ItemItemIdFieldPutValidateBeforeCall(Integer itemId, UpdateTrackerItemField updateTrackerItemField, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling v2ItemItemIdFieldPut(Async)");
        }
        

        com.squareup.okhttp.Call call = v2ItemItemIdFieldPutCall(itemId, updateTrackerItemField, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update field of tracker item
     * &lt;div class&#x3D;\&quot;wrap-collabsible\&quot;&gt;   &lt;input id&#x3D;\&quot;collapsible-f6141a91-e26c-42b1-bc23-d291a672be99\&quot; class&#x3D;\&quot;toggle\&quot; type&#x3D;\&quot;checkbox\&quot;&gt;   &lt;label for&#x3D;\&quot;collapsible-f6141a91-e26c-42b1-bc23-d291a672be99\&quot; class&#x3D;\&quot;lbl-toggle\&quot;&gt;Examples&lt;/label&gt;   &lt;div class&#x3D;\&quot;collapsible-content\&quot;&gt;     &lt;div class&#x3D;\&quot;content-inner\&quot;&gt; &lt;p&gt;&lt;u&gt;&lt;b&gt;How to update multiple fields of a tracker item&lt;/b&gt;&lt;/u&gt;&lt;/p&gt; &lt;p&gt;Examples of this end point are going to use the Task tracker of Intland Software&amp;#39;s Scrum&lt;/p&gt; &lt;p&gt;Please create a 2 new custom fields in your tracker, one of them should be a integer custom field with 0 min and 10 max value, other one should be a choice field with option1, option2, and option3 choice options and also create a table field with 2 new column in your tracker, one of them should be a integer custom field with 0 min and 10 max value, other one should be a choice field with option1, option2, and option3 choice options&lt;/p&gt; &lt;p&gt;Use the following JSON request&lt;/p&gt; &lt;pre&gt; {   &amp;#34;fieldValues&amp;#34;: [     {       &amp;#34;fieldId&amp;#34;: 10001,       &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;,       &amp;#34;value&amp;#34;: 4     },     {       &amp;#34;fieldId&amp;#34;: 1000,       &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,       &amp;#34;values&amp;#34;: [ 2 ]     }   ],   &amp;#34;tableValues&amp;#34;: [     {       &amp;#34;fieldId&amp;#34;: 1000000,       &amp;#34;type&amp;#34;: &amp;#34;trackerItemTableFieldValue&amp;#34;,       &amp;#34;rows&amp;#34;: [         {           &amp;#34;fieldValues&amp;#34;: [             {               &amp;#34;fieldId&amp;#34;: 1000001,               &amp;#34;value&amp;#34;: 4,               &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;             },             {               &amp;#34;fieldId&amp;#34;: 1000002,               &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,               &amp;#34;values&amp;#34;: [ 1 ]             }           ]         },         {           &amp;#34;fieldValues&amp;#34;: [             {               &amp;#34;fieldId&amp;#34;: 1000001,               &amp;#34;value&amp;#34;: 7,               &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;             },             {               &amp;#34;fieldId&amp;#34;: 1000002,               &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,               &amp;#34;values&amp;#34;: [ 2 ]             }           ]         }       ]     }   ] } &lt;/pre&gt; &lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;
     * @param itemId  (required)
     * @param updateTrackerItemField  (optional)
     * @return TrackerItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerItem v2ItemItemIdFieldPut(Integer itemId, UpdateTrackerItemField updateTrackerItemField) throws ApiException {
        ApiResponse<TrackerItem> resp = v2ItemItemIdFieldPutWithHttpInfo(itemId, updateTrackerItemField);
        return resp.getData();
    }

    /**
     * Update field of tracker item
     * &lt;div class&#x3D;\&quot;wrap-collabsible\&quot;&gt;   &lt;input id&#x3D;\&quot;collapsible-f6141a91-e26c-42b1-bc23-d291a672be99\&quot; class&#x3D;\&quot;toggle\&quot; type&#x3D;\&quot;checkbox\&quot;&gt;   &lt;label for&#x3D;\&quot;collapsible-f6141a91-e26c-42b1-bc23-d291a672be99\&quot; class&#x3D;\&quot;lbl-toggle\&quot;&gt;Examples&lt;/label&gt;   &lt;div class&#x3D;\&quot;collapsible-content\&quot;&gt;     &lt;div class&#x3D;\&quot;content-inner\&quot;&gt; &lt;p&gt;&lt;u&gt;&lt;b&gt;How to update multiple fields of a tracker item&lt;/b&gt;&lt;/u&gt;&lt;/p&gt; &lt;p&gt;Examples of this end point are going to use the Task tracker of Intland Software&amp;#39;s Scrum&lt;/p&gt; &lt;p&gt;Please create a 2 new custom fields in your tracker, one of them should be a integer custom field with 0 min and 10 max value, other one should be a choice field with option1, option2, and option3 choice options and also create a table field with 2 new column in your tracker, one of them should be a integer custom field with 0 min and 10 max value, other one should be a choice field with option1, option2, and option3 choice options&lt;/p&gt; &lt;p&gt;Use the following JSON request&lt;/p&gt; &lt;pre&gt; {   &amp;#34;fieldValues&amp;#34;: [     {       &amp;#34;fieldId&amp;#34;: 10001,       &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;,       &amp;#34;value&amp;#34;: 4     },     {       &amp;#34;fieldId&amp;#34;: 1000,       &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,       &amp;#34;values&amp;#34;: [ 2 ]     }   ],   &amp;#34;tableValues&amp;#34;: [     {       &amp;#34;fieldId&amp;#34;: 1000000,       &amp;#34;type&amp;#34;: &amp;#34;trackerItemTableFieldValue&amp;#34;,       &amp;#34;rows&amp;#34;: [         {           &amp;#34;fieldValues&amp;#34;: [             {               &amp;#34;fieldId&amp;#34;: 1000001,               &amp;#34;value&amp;#34;: 4,               &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;             },             {               &amp;#34;fieldId&amp;#34;: 1000002,               &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,               &amp;#34;values&amp;#34;: [ 1 ]             }           ]         },         {           &amp;#34;fieldValues&amp;#34;: [             {               &amp;#34;fieldId&amp;#34;: 1000001,               &amp;#34;value&amp;#34;: 7,               &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;             },             {               &amp;#34;fieldId&amp;#34;: 1000002,               &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,               &amp;#34;values&amp;#34;: [ 2 ]             }           ]         }       ]     }   ] } &lt;/pre&gt; &lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;
     * @param itemId  (required)
     * @param updateTrackerItemField  (optional)
     * @return ApiResponse&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerItem> v2ItemItemIdFieldPutWithHttpInfo(Integer itemId, UpdateTrackerItemField updateTrackerItemField) throws ApiException {
        com.squareup.okhttp.Call call = v2ItemItemIdFieldPutValidateBeforeCall(itemId, updateTrackerItemField, null, null);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update field of tracker item (asynchronously)
     * &lt;div class&#x3D;\&quot;wrap-collabsible\&quot;&gt;   &lt;input id&#x3D;\&quot;collapsible-f6141a91-e26c-42b1-bc23-d291a672be99\&quot; class&#x3D;\&quot;toggle\&quot; type&#x3D;\&quot;checkbox\&quot;&gt;   &lt;label for&#x3D;\&quot;collapsible-f6141a91-e26c-42b1-bc23-d291a672be99\&quot; class&#x3D;\&quot;lbl-toggle\&quot;&gt;Examples&lt;/label&gt;   &lt;div class&#x3D;\&quot;collapsible-content\&quot;&gt;     &lt;div class&#x3D;\&quot;content-inner\&quot;&gt; &lt;p&gt;&lt;u&gt;&lt;b&gt;How to update multiple fields of a tracker item&lt;/b&gt;&lt;/u&gt;&lt;/p&gt; &lt;p&gt;Examples of this end point are going to use the Task tracker of Intland Software&amp;#39;s Scrum&lt;/p&gt; &lt;p&gt;Please create a 2 new custom fields in your tracker, one of them should be a integer custom field with 0 min and 10 max value, other one should be a choice field with option1, option2, and option3 choice options and also create a table field with 2 new column in your tracker, one of them should be a integer custom field with 0 min and 10 max value, other one should be a choice field with option1, option2, and option3 choice options&lt;/p&gt; &lt;p&gt;Use the following JSON request&lt;/p&gt; &lt;pre&gt; {   &amp;#34;fieldValues&amp;#34;: [     {       &amp;#34;fieldId&amp;#34;: 10001,       &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;,       &amp;#34;value&amp;#34;: 4     },     {       &amp;#34;fieldId&amp;#34;: 1000,       &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,       &amp;#34;values&amp;#34;: [ 2 ]     }   ],   &amp;#34;tableValues&amp;#34;: [     {       &amp;#34;fieldId&amp;#34;: 1000000,       &amp;#34;type&amp;#34;: &amp;#34;trackerItemTableFieldValue&amp;#34;,       &amp;#34;rows&amp;#34;: [         {           &amp;#34;fieldValues&amp;#34;: [             {               &amp;#34;fieldId&amp;#34;: 1000001,               &amp;#34;value&amp;#34;: 4,               &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;             },             {               &amp;#34;fieldId&amp;#34;: 1000002,               &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,               &amp;#34;values&amp;#34;: [ 1 ]             }           ]         },         {           &amp;#34;fieldValues&amp;#34;: [             {               &amp;#34;fieldId&amp;#34;: 1000001,               &amp;#34;value&amp;#34;: 7,               &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;             },             {               &amp;#34;fieldId&amp;#34;: 1000002,               &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,               &amp;#34;values&amp;#34;: [ 2 ]             }           ]         }       ]     }   ] } &lt;/pre&gt; &lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;
     * @param itemId  (required)
     * @param updateTrackerItemField  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2ItemItemIdFieldPutAsync(Integer itemId, UpdateTrackerItemField updateTrackerItemField, final ApiCallback<TrackerItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2ItemItemIdFieldPutValidateBeforeCall(itemId, updateTrackerItemField, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v2ItemItemIdFieldTableTableFieldIdPut
     * @param itemId  (required)
     * @param tableFieldId  (required)
     * @param updateTrackerItemTableField  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2ItemItemIdFieldTableTableFieldIdPutCall(Integer itemId, Integer tableFieldId, UpdateTrackerItemTableField updateTrackerItemTableField, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateTrackerItemTableField;

        // create path and map variables
        String localVarPath = "/v2/item/{itemId}/field/table/{tableFieldId}"
            .replaceAll("\\{" + "itemId" + "\\}", apiClient.escapeString(itemId.toString()))
            .replaceAll("\\{" + "tableFieldId" + "\\}", apiClient.escapeString(tableFieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2ItemItemIdFieldTableTableFieldIdPutValidateBeforeCall(Integer itemId, Integer tableFieldId, UpdateTrackerItemTableField updateTrackerItemTableField, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling v2ItemItemIdFieldTableTableFieldIdPut(Async)");
        }
        
        // verify the required parameter 'tableFieldId' is set
        if (tableFieldId == null) {
            throw new ApiException("Missing the required parameter 'tableFieldId' when calling v2ItemItemIdFieldTableTableFieldIdPut(Async)");
        }
        

        com.squareup.okhttp.Call call = v2ItemItemIdFieldTableTableFieldIdPutCall(itemId, tableFieldId, updateTrackerItemTableField, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update table field of tracker item
     * 
     * @param itemId  (required)
     * @param tableFieldId  (required)
     * @param updateTrackerItemTableField  (optional)
     * @return TrackerItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerItem v2ItemItemIdFieldTableTableFieldIdPut(Integer itemId, Integer tableFieldId, UpdateTrackerItemTableField updateTrackerItemTableField) throws ApiException {
        ApiResponse<TrackerItem> resp = v2ItemItemIdFieldTableTableFieldIdPutWithHttpInfo(itemId, tableFieldId, updateTrackerItemTableField);
        return resp.getData();
    }

    /**
     * Update table field of tracker item
     * 
     * @param itemId  (required)
     * @param tableFieldId  (required)
     * @param updateTrackerItemTableField  (optional)
     * @return ApiResponse&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerItem> v2ItemItemIdFieldTableTableFieldIdPutWithHttpInfo(Integer itemId, Integer tableFieldId, UpdateTrackerItemTableField updateTrackerItemTableField) throws ApiException {
        com.squareup.okhttp.Call call = v2ItemItemIdFieldTableTableFieldIdPutValidateBeforeCall(itemId, tableFieldId, updateTrackerItemTableField, null, null);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update table field of tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param tableFieldId  (required)
     * @param updateTrackerItemTableField  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2ItemItemIdFieldTableTableFieldIdPutAsync(Integer itemId, Integer tableFieldId, UpdateTrackerItemTableField updateTrackerItemTableField, final ApiCallback<TrackerItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2ItemItemIdFieldTableTableFieldIdPutValidateBeforeCall(itemId, tableFieldId, updateTrackerItemTableField, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v2ItemItemIdGet
     * @param itemId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2ItemItemIdGetCall(Integer itemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/item/{itemId}"
            .replaceAll("\\{" + "itemId" + "\\}", apiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2ItemItemIdGetValidateBeforeCall(Integer itemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling v2ItemItemIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = v2ItemItemIdGetCall(itemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get basic tracker item
     * API can be used for fetching basic information of a tracker item
     * @param itemId  (required)
     * @return TrackerItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerItem v2ItemItemIdGet(Integer itemId) throws ApiException {
        ApiResponse<TrackerItem> resp = v2ItemItemIdGetWithHttpInfo(itemId);
        return resp.getData();
    }

    /**
     * Get basic tracker item
     * API can be used for fetching basic information of a tracker item
     * @param itemId  (required)
     * @return ApiResponse&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerItem> v2ItemItemIdGetWithHttpInfo(Integer itemId) throws ApiException {
        com.squareup.okhttp.Call call = v2ItemItemIdGetValidateBeforeCall(itemId, null, null);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get basic tracker item (asynchronously)
     * API can be used for fetching basic information of a tracker item
     * @param itemId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2ItemItemIdGetAsync(Integer itemId, final ApiCallback<TrackerItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2ItemItemIdGetValidateBeforeCall(itemId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v2ItemItemIdPut
     * @param itemId  (required)
     * @param updateTrackerItem  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2ItemItemIdPutCall(Integer itemId, UpdateTrackerItem updateTrackerItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateTrackerItem;

        // create path and map variables
        String localVarPath = "/v2/item/{itemId}"
            .replaceAll("\\{" + "itemId" + "\\}", apiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2ItemItemIdPutValidateBeforeCall(Integer itemId, UpdateTrackerItem updateTrackerItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling v2ItemItemIdPut(Async)");
        }
        

        com.squareup.okhttp.Call call = v2ItemItemIdPutCall(itemId, updateTrackerItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update tracker item
     * &lt;div class&#x3D;\&quot;wrap-collabsible\&quot;&gt;   &lt;input id&#x3D;\&quot;collapsible-99fff6a0-581d-469c-be54-11b4224cdc0e\&quot; class&#x3D;\&quot;toggle\&quot; type&#x3D;\&quot;checkbox\&quot;&gt;   &lt;label for&#x3D;\&quot;collapsible-99fff6a0-581d-469c-be54-11b4224cdc0e\&quot; class&#x3D;\&quot;lbl-toggle\&quot;&gt;Examples&lt;/label&gt;   &lt;div class&#x3D;\&quot;collapsible-content\&quot;&gt;     &lt;div class&#x3D;\&quot;content-inner\&quot;&gt; &lt;p&gt;Please check the &amp;#39;Create tracker item&amp;#39; end point for examples&lt;/p&gt;&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;
     * @param itemId  (required)
     * @param updateTrackerItem  (optional)
     * @return TrackerItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerItem v2ItemItemIdPut(Integer itemId, UpdateTrackerItem updateTrackerItem) throws ApiException {
        ApiResponse<TrackerItem> resp = v2ItemItemIdPutWithHttpInfo(itemId, updateTrackerItem);
        return resp.getData();
    }

    /**
     * Update tracker item
     * &lt;div class&#x3D;\&quot;wrap-collabsible\&quot;&gt;   &lt;input id&#x3D;\&quot;collapsible-99fff6a0-581d-469c-be54-11b4224cdc0e\&quot; class&#x3D;\&quot;toggle\&quot; type&#x3D;\&quot;checkbox\&quot;&gt;   &lt;label for&#x3D;\&quot;collapsible-99fff6a0-581d-469c-be54-11b4224cdc0e\&quot; class&#x3D;\&quot;lbl-toggle\&quot;&gt;Examples&lt;/label&gt;   &lt;div class&#x3D;\&quot;collapsible-content\&quot;&gt;     &lt;div class&#x3D;\&quot;content-inner\&quot;&gt; &lt;p&gt;Please check the &amp;#39;Create tracker item&amp;#39; end point for examples&lt;/p&gt;&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;
     * @param itemId  (required)
     * @param updateTrackerItem  (optional)
     * @return ApiResponse&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerItem> v2ItemItemIdPutWithHttpInfo(Integer itemId, UpdateTrackerItem updateTrackerItem) throws ApiException {
        com.squareup.okhttp.Call call = v2ItemItemIdPutValidateBeforeCall(itemId, updateTrackerItem, null, null);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update tracker item (asynchronously)
     * &lt;div class&#x3D;\&quot;wrap-collabsible\&quot;&gt;   &lt;input id&#x3D;\&quot;collapsible-99fff6a0-581d-469c-be54-11b4224cdc0e\&quot; class&#x3D;\&quot;toggle\&quot; type&#x3D;\&quot;checkbox\&quot;&gt;   &lt;label for&#x3D;\&quot;collapsible-99fff6a0-581d-469c-be54-11b4224cdc0e\&quot; class&#x3D;\&quot;lbl-toggle\&quot;&gt;Examples&lt;/label&gt;   &lt;div class&#x3D;\&quot;collapsible-content\&quot;&gt;     &lt;div class&#x3D;\&quot;content-inner\&quot;&gt; &lt;p&gt;Please check the &amp;#39;Create tracker item&amp;#39; end point for examples&lt;/p&gt;&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;
     * @param itemId  (required)
     * @param updateTrackerItem  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2ItemItemIdPutAsync(Integer itemId, UpdateTrackerItem updateTrackerItem, final ApiCallback<TrackerItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2ItemItemIdPutValidateBeforeCall(itemId, updateTrackerItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v2TrackerTrackerIdItemParentItemIdPost
     * @param trackerId  (required)
     * @param parentItemId  (required)
     * @param createTrackerItem  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2TrackerTrackerIdItemParentItemIdPostCall(Integer trackerId, Integer parentItemId, CreateTrackerItem createTrackerItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createTrackerItem;

        // create path and map variables
        String localVarPath = "/v2/tracker/{trackerId}/item/{parentItemId}"
            .replaceAll("\\{" + "trackerId" + "\\}", apiClient.escapeString(trackerId.toString()))
            .replaceAll("\\{" + "parentItemId" + "\\}", apiClient.escapeString(parentItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2TrackerTrackerIdItemParentItemIdPostValidateBeforeCall(Integer trackerId, Integer parentItemId, CreateTrackerItem createTrackerItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling v2TrackerTrackerIdItemParentItemIdPost(Async)");
        }
        
        // verify the required parameter 'parentItemId' is set
        if (parentItemId == null) {
            throw new ApiException("Missing the required parameter 'parentItemId' when calling v2TrackerTrackerIdItemParentItemIdPost(Async)");
        }
        

        com.squareup.okhttp.Call call = v2TrackerTrackerIdItemParentItemIdPostCall(trackerId, parentItemId, createTrackerItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a tracker item with parent
     * &lt;div class&#x3D;\&quot;wrap-collabsible\&quot;&gt;   &lt;input id&#x3D;\&quot;collapsible-f684e99b-9aa3-49de-9cd0-0a757237d85d\&quot; class&#x3D;\&quot;toggle\&quot; type&#x3D;\&quot;checkbox\&quot;&gt;   &lt;label for&#x3D;\&quot;collapsible-f684e99b-9aa3-49de-9cd0-0a757237d85d\&quot; class&#x3D;\&quot;lbl-toggle\&quot;&gt;Examples&lt;/label&gt;   &lt;div class&#x3D;\&quot;collapsible-content\&quot;&gt;     &lt;div class&#x3D;\&quot;content-inner\&quot;&gt; &lt;p&gt;Please check the &amp;#39;Create tracker item&amp;#39; end point for examples&lt;/p&gt;&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;
     * @param trackerId  (required)
     * @param parentItemId  (required)
     * @param createTrackerItem  (optional)
     * @return TrackerItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerItem v2TrackerTrackerIdItemParentItemIdPost(Integer trackerId, Integer parentItemId, CreateTrackerItem createTrackerItem) throws ApiException {
        ApiResponse<TrackerItem> resp = v2TrackerTrackerIdItemParentItemIdPostWithHttpInfo(trackerId, parentItemId, createTrackerItem);
        return resp.getData();
    }

    /**
     * Create a tracker item with parent
     * &lt;div class&#x3D;\&quot;wrap-collabsible\&quot;&gt;   &lt;input id&#x3D;\&quot;collapsible-f684e99b-9aa3-49de-9cd0-0a757237d85d\&quot; class&#x3D;\&quot;toggle\&quot; type&#x3D;\&quot;checkbox\&quot;&gt;   &lt;label for&#x3D;\&quot;collapsible-f684e99b-9aa3-49de-9cd0-0a757237d85d\&quot; class&#x3D;\&quot;lbl-toggle\&quot;&gt;Examples&lt;/label&gt;   &lt;div class&#x3D;\&quot;collapsible-content\&quot;&gt;     &lt;div class&#x3D;\&quot;content-inner\&quot;&gt; &lt;p&gt;Please check the &amp;#39;Create tracker item&amp;#39; end point for examples&lt;/p&gt;&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;
     * @param trackerId  (required)
     * @param parentItemId  (required)
     * @param createTrackerItem  (optional)
     * @return ApiResponse&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerItem> v2TrackerTrackerIdItemParentItemIdPostWithHttpInfo(Integer trackerId, Integer parentItemId, CreateTrackerItem createTrackerItem) throws ApiException {
        com.squareup.okhttp.Call call = v2TrackerTrackerIdItemParentItemIdPostValidateBeforeCall(trackerId, parentItemId, createTrackerItem, null, null);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a tracker item with parent (asynchronously)
     * &lt;div class&#x3D;\&quot;wrap-collabsible\&quot;&gt;   &lt;input id&#x3D;\&quot;collapsible-f684e99b-9aa3-49de-9cd0-0a757237d85d\&quot; class&#x3D;\&quot;toggle\&quot; type&#x3D;\&quot;checkbox\&quot;&gt;   &lt;label for&#x3D;\&quot;collapsible-f684e99b-9aa3-49de-9cd0-0a757237d85d\&quot; class&#x3D;\&quot;lbl-toggle\&quot;&gt;Examples&lt;/label&gt;   &lt;div class&#x3D;\&quot;collapsible-content\&quot;&gt;     &lt;div class&#x3D;\&quot;content-inner\&quot;&gt; &lt;p&gt;Please check the &amp;#39;Create tracker item&amp;#39; end point for examples&lt;/p&gt;&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;
     * @param trackerId  (required)
     * @param parentItemId  (required)
     * @param createTrackerItem  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2TrackerTrackerIdItemParentItemIdPostAsync(Integer trackerId, Integer parentItemId, CreateTrackerItem createTrackerItem, final ApiCallback<TrackerItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2TrackerTrackerIdItemParentItemIdPostValidateBeforeCall(trackerId, parentItemId, createTrackerItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v2TrackerTrackerIdItemPost
     * @param trackerId  (required)
     * @param createTrackerItem  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2TrackerTrackerIdItemPostCall(Integer trackerId, CreateTrackerItem createTrackerItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createTrackerItem;

        // create path and map variables
        String localVarPath = "/v2/tracker/{trackerId}/item"
            .replaceAll("\\{" + "trackerId" + "\\}", apiClient.escapeString(trackerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2TrackerTrackerIdItemPostValidateBeforeCall(Integer trackerId, CreateTrackerItem createTrackerItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling v2TrackerTrackerIdItemPost(Async)");
        }
        

        com.squareup.okhttp.Call call = v2TrackerTrackerIdItemPostCall(trackerId, createTrackerItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a tracker item
     * &lt;div class&#x3D;\&quot;wrap-collabsible\&quot;&gt;   &lt;input id&#x3D;\&quot;collapsible-3fc73f9f-172d-46fc-a6cf-f33d51de0695\&quot; class&#x3D;\&quot;toggle\&quot; type&#x3D;\&quot;checkbox\&quot;&gt;   &lt;label for&#x3D;\&quot;collapsible-3fc73f9f-172d-46fc-a6cf-f33d51de0695\&quot; class&#x3D;\&quot;lbl-toggle\&quot;&gt;Examples&lt;/label&gt;   &lt;div class&#x3D;\&quot;collapsible-content\&quot;&gt;     &lt;div class&#x3D;\&quot;content-inner\&quot;&gt; &lt;p&gt;&lt;u&gt;&lt;b&gt;How to create a tracker item with basic information&lt;/b&gt;&lt;/u&gt;&lt;/p&gt; &lt;p&gt;Examples of this end point are going to use the Task tracker of Intland Software&amp;#39;s Scrum&lt;/p&gt; &lt;p&gt;&lt;u&gt;&lt;b&gt;Create a tracker image with commonly used fields&lt;/b&gt;&lt;/u&gt;&lt;/p&gt; &lt;p&gt;Please use the following JSON request&lt;/p&gt; &lt;pre&gt; {   &amp;#34;name&amp;#34;: &amp;#34;My first tracker item&amp;#34;,   &amp;#34;description&amp;#34;: &amp;#34;I love this API&amp;#34;,   &amp;#34;storyPoints&amp;#34;: 42,   &amp;#34;startDate&amp;#34;: &amp;#34;2018-11-19T15:13:34.223Z&amp;#34;,   &amp;#34;endDate&amp;#34;: &amp;#34;2018-11-19T15:13:34.223Z&amp;#34;,   &amp;#34;estimatedMillis&amp;#34;: 42000,   &amp;#34;status&amp;#34;: {     &amp;#34;fieldId&amp;#34;: 7,     &amp;#34;type&amp;#34;: &amp;#34;singleOptionChoiceFieldValue&amp;#34;,     &amp;#34;value&amp;#34;: 1   },   &amp;#34;priority&amp;#34;: {     &amp;#34;fieldId&amp;#34;: 2,     &amp;#34;type&amp;#34;: &amp;#34;singleOptionChoiceFieldValue&amp;#34;,     &amp;#34;value&amp;#34;: 2   },   &amp;#34;severities&amp;#34;: {     &amp;#34;fieldId&amp;#34;: 14,     &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,     &amp;#34;values&amp;#34;: [3]   },   &amp;#34;assignees&amp;#34;: [     {       &amp;#34;fieldId&amp;#34;: 5,       &amp;#34;type&amp;#34;: &amp;#34;userFieldValue&amp;#34;,       &amp;#34;value&amp;#34;: 1     }   ] } &lt;/pre&gt;  &lt;p&gt;Status / priority field only handles one option, because of that we need to use the &lt;i&gt;singleOptionChoiceFieldValue&lt;/i&gt; as a type of the field, value of the field is one of the ID of the available options, please check the &amp;#39;/v2/tracker/{trackerId}/field&amp;#39; API end point to see all values. In this case we want to set the status to &lt;b&gt;New&lt;/b&gt;, which is ID 1, and set the priority to &lt;b&gt;High&lt;/b&gt;, which is ID 2.&lt;/p&gt; &lt;p&gt;Severities is a multiple option field, it can handle multiple options, because of the we need to use the &lt;i&gt;optionChoiceFieldValue&lt;/i&gt; as a type of the field, values of the field is one or more of the IDs of the available options. In this case we want to set the Severities to &amp;#34;Minor&amp;#34;, which is ID 3&lt;/p&gt; &lt;p&gt;Tracker item can be assigned to multiple users, in this case use only on user with ID 1. Please note that user must be assigned to the project.&lt;/p&gt; &lt;p&gt;&lt;u&gt;&lt;b&gt;Create a tracker image with custom fields&lt;/b&gt;&lt;/u&gt;&lt;/p&gt; &lt;p&gt;Please create a 2 new custom fields in your tracker, one of them should be a integer custom field with 0 min and 10 max value, other one should be a choice field with option1, option2, and option3 choice options&lt;/p&gt; &lt;p&gt;Use the following JSON request to create a tracker item&lt;/p&gt; &lt;pre&gt; {   &amp;#34;name&amp;#34;: &amp;#34;My first tracker item with custom field&amp;#34;,   &amp;#34;description&amp;#34;: &amp;#34;I love this API&amp;#34;,   &amp;#34;customFieldValues&amp;#34;: [     {       &amp;#34;fieldId&amp;#34;: 10001,       &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;,       &amp;#34;value&amp;#34;: 5     },     {       &amp;#34;fieldId&amp;#34;: 1000,       &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,       &amp;#34;values&amp;#34;: [ 1, 3 ]     }   ] } &lt;/pre&gt;  &lt;p&gt;Field ID is depends on your tracker layout, it might be differ from the example above, please check the &amp;#39;/v2/tracker/{trackerId}/field&amp;#39; API end point to get the valid ID.&lt;/p&gt; &lt;p&gt;Because of the &lt;b&gt;10001&lt;/b&gt; field is a integer field, type is set to to &lt;i&gt;integerFieldValue&lt;/i&gt;, value is set to 5. In case you want to trigger a validation message, please set the value 11 or more.&lt;/p&gt; &lt;p&gt;We want to set the option1 and option3 values for &lt;b&gt;1000&lt;/b&gt; choice field, to do that we need to use &lt;i&gt;optionChoiceFieldValue&lt;/i&gt; type, and ID of option1 and option3&lt;/p&gt; &lt;p&gt;&lt;u&gt;&lt;b&gt;Create a tracker image with custom table field&lt;/b&gt;&lt;/u&gt;&lt;/p&gt; &lt;p&gt;Please create a table field with 2 new column in your tracker, one of them should be a integer custom field with 0 min and 10 max value, other one should be a choice field with option1, option2, and option3 choice options&lt;/p&gt; &lt;p&gt;Use the following JSON request to create a tracker item&lt;/p&gt; &lt;pre&gt; {   &amp;#34;name&amp;#34;: &amp;#34;My first tracker item with table field&amp;#34;,   &amp;#34;description&amp;#34;: &amp;#34;I love this API&amp;#34;,   &amp;#34;tableValues&amp;#34;: [     {       &amp;#34;fieldId&amp;#34;: 1000000,       &amp;#34;type&amp;#34;: &amp;#34;trackerItemTableFieldValue&amp;#34;,       &amp;#34;rows&amp;#34;: [         {           &amp;#34;fieldValues&amp;#34;: [             {               &amp;#34;fieldId&amp;#34;: 1000001,               &amp;#34;value&amp;#34;: 5,               &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;             },             {               &amp;#34;fieldId&amp;#34;: 1000002,               &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,               &amp;#34;values&amp;#34;: [ 1, 2 ]             }           ]         },         {           &amp;#34;fieldValues&amp;#34;: [             {               &amp;#34;fieldId&amp;#34;: 1000001,               &amp;#34;value&amp;#34;: 6,               &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;             },             {               &amp;#34;fieldId&amp;#34;: 1000002,               &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,               &amp;#34;values&amp;#34;: [ 3 ]             }           ]         }       ]     }   ] } &lt;/pre&gt;  &lt;p&gt;Field ID is depends on your tracker layout, it might be differ from the example above, please check the &amp;#39;/v2/tracker/{trackerId}/field&amp;#39; API end point to get the valid ID.&lt;/p&gt; &lt;p&gt;Because of the table can handle multiple rows we need to create a &lt;i&gt;trackerItemTableFieldValue&lt;/i&gt; container with rows. First column is a integer field with &lt;b&gt;1000001&lt;/b&gt;, type is set to to &lt;i&gt;integerFieldValue&lt;/i&gt;, value is set to 5. In case you want to trigger a validation message, please set the value 11 or more. Second column is a choice option column, type is set to &lt;i&gt;optionChoiceFieldValue&lt;/i&gt;, value is set to IDs of option1 and option3. &lt;/p&gt;&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;
     * @param trackerId  (required)
     * @param createTrackerItem  (optional)
     * @return TrackerItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerItem v2TrackerTrackerIdItemPost(Integer trackerId, CreateTrackerItem createTrackerItem) throws ApiException {
        ApiResponse<TrackerItem> resp = v2TrackerTrackerIdItemPostWithHttpInfo(trackerId, createTrackerItem);
        return resp.getData();
    }

    /**
     * Create a tracker item
     * &lt;div class&#x3D;\&quot;wrap-collabsible\&quot;&gt;   &lt;input id&#x3D;\&quot;collapsible-3fc73f9f-172d-46fc-a6cf-f33d51de0695\&quot; class&#x3D;\&quot;toggle\&quot; type&#x3D;\&quot;checkbox\&quot;&gt;   &lt;label for&#x3D;\&quot;collapsible-3fc73f9f-172d-46fc-a6cf-f33d51de0695\&quot; class&#x3D;\&quot;lbl-toggle\&quot;&gt;Examples&lt;/label&gt;   &lt;div class&#x3D;\&quot;collapsible-content\&quot;&gt;     &lt;div class&#x3D;\&quot;content-inner\&quot;&gt; &lt;p&gt;&lt;u&gt;&lt;b&gt;How to create a tracker item with basic information&lt;/b&gt;&lt;/u&gt;&lt;/p&gt; &lt;p&gt;Examples of this end point are going to use the Task tracker of Intland Software&amp;#39;s Scrum&lt;/p&gt; &lt;p&gt;&lt;u&gt;&lt;b&gt;Create a tracker image with commonly used fields&lt;/b&gt;&lt;/u&gt;&lt;/p&gt; &lt;p&gt;Please use the following JSON request&lt;/p&gt; &lt;pre&gt; {   &amp;#34;name&amp;#34;: &amp;#34;My first tracker item&amp;#34;,   &amp;#34;description&amp;#34;: &amp;#34;I love this API&amp;#34;,   &amp;#34;storyPoints&amp;#34;: 42,   &amp;#34;startDate&amp;#34;: &amp;#34;2018-11-19T15:13:34.223Z&amp;#34;,   &amp;#34;endDate&amp;#34;: &amp;#34;2018-11-19T15:13:34.223Z&amp;#34;,   &amp;#34;estimatedMillis&amp;#34;: 42000,   &amp;#34;status&amp;#34;: {     &amp;#34;fieldId&amp;#34;: 7,     &amp;#34;type&amp;#34;: &amp;#34;singleOptionChoiceFieldValue&amp;#34;,     &amp;#34;value&amp;#34;: 1   },   &amp;#34;priority&amp;#34;: {     &amp;#34;fieldId&amp;#34;: 2,     &amp;#34;type&amp;#34;: &amp;#34;singleOptionChoiceFieldValue&amp;#34;,     &amp;#34;value&amp;#34;: 2   },   &amp;#34;severities&amp;#34;: {     &amp;#34;fieldId&amp;#34;: 14,     &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,     &amp;#34;values&amp;#34;: [3]   },   &amp;#34;assignees&amp;#34;: [     {       &amp;#34;fieldId&amp;#34;: 5,       &amp;#34;type&amp;#34;: &amp;#34;userFieldValue&amp;#34;,       &amp;#34;value&amp;#34;: 1     }   ] } &lt;/pre&gt;  &lt;p&gt;Status / priority field only handles one option, because of that we need to use the &lt;i&gt;singleOptionChoiceFieldValue&lt;/i&gt; as a type of the field, value of the field is one of the ID of the available options, please check the &amp;#39;/v2/tracker/{trackerId}/field&amp;#39; API end point to see all values. In this case we want to set the status to &lt;b&gt;New&lt;/b&gt;, which is ID 1, and set the priority to &lt;b&gt;High&lt;/b&gt;, which is ID 2.&lt;/p&gt; &lt;p&gt;Severities is a multiple option field, it can handle multiple options, because of the we need to use the &lt;i&gt;optionChoiceFieldValue&lt;/i&gt; as a type of the field, values of the field is one or more of the IDs of the available options. In this case we want to set the Severities to &amp;#34;Minor&amp;#34;, which is ID 3&lt;/p&gt; &lt;p&gt;Tracker item can be assigned to multiple users, in this case use only on user with ID 1. Please note that user must be assigned to the project.&lt;/p&gt; &lt;p&gt;&lt;u&gt;&lt;b&gt;Create a tracker image with custom fields&lt;/b&gt;&lt;/u&gt;&lt;/p&gt; &lt;p&gt;Please create a 2 new custom fields in your tracker, one of them should be a integer custom field with 0 min and 10 max value, other one should be a choice field with option1, option2, and option3 choice options&lt;/p&gt; &lt;p&gt;Use the following JSON request to create a tracker item&lt;/p&gt; &lt;pre&gt; {   &amp;#34;name&amp;#34;: &amp;#34;My first tracker item with custom field&amp;#34;,   &amp;#34;description&amp;#34;: &amp;#34;I love this API&amp;#34;,   &amp;#34;customFieldValues&amp;#34;: [     {       &amp;#34;fieldId&amp;#34;: 10001,       &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;,       &amp;#34;value&amp;#34;: 5     },     {       &amp;#34;fieldId&amp;#34;: 1000,       &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,       &amp;#34;values&amp;#34;: [ 1, 3 ]     }   ] } &lt;/pre&gt;  &lt;p&gt;Field ID is depends on your tracker layout, it might be differ from the example above, please check the &amp;#39;/v2/tracker/{trackerId}/field&amp;#39; API end point to get the valid ID.&lt;/p&gt; &lt;p&gt;Because of the &lt;b&gt;10001&lt;/b&gt; field is a integer field, type is set to to &lt;i&gt;integerFieldValue&lt;/i&gt;, value is set to 5. In case you want to trigger a validation message, please set the value 11 or more.&lt;/p&gt; &lt;p&gt;We want to set the option1 and option3 values for &lt;b&gt;1000&lt;/b&gt; choice field, to do that we need to use &lt;i&gt;optionChoiceFieldValue&lt;/i&gt; type, and ID of option1 and option3&lt;/p&gt; &lt;p&gt;&lt;u&gt;&lt;b&gt;Create a tracker image with custom table field&lt;/b&gt;&lt;/u&gt;&lt;/p&gt; &lt;p&gt;Please create a table field with 2 new column in your tracker, one of them should be a integer custom field with 0 min and 10 max value, other one should be a choice field with option1, option2, and option3 choice options&lt;/p&gt; &lt;p&gt;Use the following JSON request to create a tracker item&lt;/p&gt; &lt;pre&gt; {   &amp;#34;name&amp;#34;: &amp;#34;My first tracker item with table field&amp;#34;,   &amp;#34;description&amp;#34;: &amp;#34;I love this API&amp;#34;,   &amp;#34;tableValues&amp;#34;: [     {       &amp;#34;fieldId&amp;#34;: 1000000,       &amp;#34;type&amp;#34;: &amp;#34;trackerItemTableFieldValue&amp;#34;,       &amp;#34;rows&amp;#34;: [         {           &amp;#34;fieldValues&amp;#34;: [             {               &amp;#34;fieldId&amp;#34;: 1000001,               &amp;#34;value&amp;#34;: 5,               &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;             },             {               &amp;#34;fieldId&amp;#34;: 1000002,               &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,               &amp;#34;values&amp;#34;: [ 1, 2 ]             }           ]         },         {           &amp;#34;fieldValues&amp;#34;: [             {               &amp;#34;fieldId&amp;#34;: 1000001,               &amp;#34;value&amp;#34;: 6,               &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;             },             {               &amp;#34;fieldId&amp;#34;: 1000002,               &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,               &amp;#34;values&amp;#34;: [ 3 ]             }           ]         }       ]     }   ] } &lt;/pre&gt;  &lt;p&gt;Field ID is depends on your tracker layout, it might be differ from the example above, please check the &amp;#39;/v2/tracker/{trackerId}/field&amp;#39; API end point to get the valid ID.&lt;/p&gt; &lt;p&gt;Because of the table can handle multiple rows we need to create a &lt;i&gt;trackerItemTableFieldValue&lt;/i&gt; container with rows. First column is a integer field with &lt;b&gt;1000001&lt;/b&gt;, type is set to to &lt;i&gt;integerFieldValue&lt;/i&gt;, value is set to 5. In case you want to trigger a validation message, please set the value 11 or more. Second column is a choice option column, type is set to &lt;i&gt;optionChoiceFieldValue&lt;/i&gt;, value is set to IDs of option1 and option3. &lt;/p&gt;&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;
     * @param trackerId  (required)
     * @param createTrackerItem  (optional)
     * @return ApiResponse&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerItem> v2TrackerTrackerIdItemPostWithHttpInfo(Integer trackerId, CreateTrackerItem createTrackerItem) throws ApiException {
        com.squareup.okhttp.Call call = v2TrackerTrackerIdItemPostValidateBeforeCall(trackerId, createTrackerItem, null, null);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a tracker item (asynchronously)
     * &lt;div class&#x3D;\&quot;wrap-collabsible\&quot;&gt;   &lt;input id&#x3D;\&quot;collapsible-3fc73f9f-172d-46fc-a6cf-f33d51de0695\&quot; class&#x3D;\&quot;toggle\&quot; type&#x3D;\&quot;checkbox\&quot;&gt;   &lt;label for&#x3D;\&quot;collapsible-3fc73f9f-172d-46fc-a6cf-f33d51de0695\&quot; class&#x3D;\&quot;lbl-toggle\&quot;&gt;Examples&lt;/label&gt;   &lt;div class&#x3D;\&quot;collapsible-content\&quot;&gt;     &lt;div class&#x3D;\&quot;content-inner\&quot;&gt; &lt;p&gt;&lt;u&gt;&lt;b&gt;How to create a tracker item with basic information&lt;/b&gt;&lt;/u&gt;&lt;/p&gt; &lt;p&gt;Examples of this end point are going to use the Task tracker of Intland Software&amp;#39;s Scrum&lt;/p&gt; &lt;p&gt;&lt;u&gt;&lt;b&gt;Create a tracker image with commonly used fields&lt;/b&gt;&lt;/u&gt;&lt;/p&gt; &lt;p&gt;Please use the following JSON request&lt;/p&gt; &lt;pre&gt; {   &amp;#34;name&amp;#34;: &amp;#34;My first tracker item&amp;#34;,   &amp;#34;description&amp;#34;: &amp;#34;I love this API&amp;#34;,   &amp;#34;storyPoints&amp;#34;: 42,   &amp;#34;startDate&amp;#34;: &amp;#34;2018-11-19T15:13:34.223Z&amp;#34;,   &amp;#34;endDate&amp;#34;: &amp;#34;2018-11-19T15:13:34.223Z&amp;#34;,   &amp;#34;estimatedMillis&amp;#34;: 42000,   &amp;#34;status&amp;#34;: {     &amp;#34;fieldId&amp;#34;: 7,     &amp;#34;type&amp;#34;: &amp;#34;singleOptionChoiceFieldValue&amp;#34;,     &amp;#34;value&amp;#34;: 1   },   &amp;#34;priority&amp;#34;: {     &amp;#34;fieldId&amp;#34;: 2,     &amp;#34;type&amp;#34;: &amp;#34;singleOptionChoiceFieldValue&amp;#34;,     &amp;#34;value&amp;#34;: 2   },   &amp;#34;severities&amp;#34;: {     &amp;#34;fieldId&amp;#34;: 14,     &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,     &amp;#34;values&amp;#34;: [3]   },   &amp;#34;assignees&amp;#34;: [     {       &amp;#34;fieldId&amp;#34;: 5,       &amp;#34;type&amp;#34;: &amp;#34;userFieldValue&amp;#34;,       &amp;#34;value&amp;#34;: 1     }   ] } &lt;/pre&gt;  &lt;p&gt;Status / priority field only handles one option, because of that we need to use the &lt;i&gt;singleOptionChoiceFieldValue&lt;/i&gt; as a type of the field, value of the field is one of the ID of the available options, please check the &amp;#39;/v2/tracker/{trackerId}/field&amp;#39; API end point to see all values. In this case we want to set the status to &lt;b&gt;New&lt;/b&gt;, which is ID 1, and set the priority to &lt;b&gt;High&lt;/b&gt;, which is ID 2.&lt;/p&gt; &lt;p&gt;Severities is a multiple option field, it can handle multiple options, because of the we need to use the &lt;i&gt;optionChoiceFieldValue&lt;/i&gt; as a type of the field, values of the field is one or more of the IDs of the available options. In this case we want to set the Severities to &amp;#34;Minor&amp;#34;, which is ID 3&lt;/p&gt; &lt;p&gt;Tracker item can be assigned to multiple users, in this case use only on user with ID 1. Please note that user must be assigned to the project.&lt;/p&gt; &lt;p&gt;&lt;u&gt;&lt;b&gt;Create a tracker image with custom fields&lt;/b&gt;&lt;/u&gt;&lt;/p&gt; &lt;p&gt;Please create a 2 new custom fields in your tracker, one of them should be a integer custom field with 0 min and 10 max value, other one should be a choice field with option1, option2, and option3 choice options&lt;/p&gt; &lt;p&gt;Use the following JSON request to create a tracker item&lt;/p&gt; &lt;pre&gt; {   &amp;#34;name&amp;#34;: &amp;#34;My first tracker item with custom field&amp;#34;,   &amp;#34;description&amp;#34;: &amp;#34;I love this API&amp;#34;,   &amp;#34;customFieldValues&amp;#34;: [     {       &amp;#34;fieldId&amp;#34;: 10001,       &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;,       &amp;#34;value&amp;#34;: 5     },     {       &amp;#34;fieldId&amp;#34;: 1000,       &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,       &amp;#34;values&amp;#34;: [ 1, 3 ]     }   ] } &lt;/pre&gt;  &lt;p&gt;Field ID is depends on your tracker layout, it might be differ from the example above, please check the &amp;#39;/v2/tracker/{trackerId}/field&amp;#39; API end point to get the valid ID.&lt;/p&gt; &lt;p&gt;Because of the &lt;b&gt;10001&lt;/b&gt; field is a integer field, type is set to to &lt;i&gt;integerFieldValue&lt;/i&gt;, value is set to 5. In case you want to trigger a validation message, please set the value 11 or more.&lt;/p&gt; &lt;p&gt;We want to set the option1 and option3 values for &lt;b&gt;1000&lt;/b&gt; choice field, to do that we need to use &lt;i&gt;optionChoiceFieldValue&lt;/i&gt; type, and ID of option1 and option3&lt;/p&gt; &lt;p&gt;&lt;u&gt;&lt;b&gt;Create a tracker image with custom table field&lt;/b&gt;&lt;/u&gt;&lt;/p&gt; &lt;p&gt;Please create a table field with 2 new column in your tracker, one of them should be a integer custom field with 0 min and 10 max value, other one should be a choice field with option1, option2, and option3 choice options&lt;/p&gt; &lt;p&gt;Use the following JSON request to create a tracker item&lt;/p&gt; &lt;pre&gt; {   &amp;#34;name&amp;#34;: &amp;#34;My first tracker item with table field&amp;#34;,   &amp;#34;description&amp;#34;: &amp;#34;I love this API&amp;#34;,   &amp;#34;tableValues&amp;#34;: [     {       &amp;#34;fieldId&amp;#34;: 1000000,       &amp;#34;type&amp;#34;: &amp;#34;trackerItemTableFieldValue&amp;#34;,       &amp;#34;rows&amp;#34;: [         {           &amp;#34;fieldValues&amp;#34;: [             {               &amp;#34;fieldId&amp;#34;: 1000001,               &amp;#34;value&amp;#34;: 5,               &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;             },             {               &amp;#34;fieldId&amp;#34;: 1000002,               &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,               &amp;#34;values&amp;#34;: [ 1, 2 ]             }           ]         },         {           &amp;#34;fieldValues&amp;#34;: [             {               &amp;#34;fieldId&amp;#34;: 1000001,               &amp;#34;value&amp;#34;: 6,               &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;             },             {               &amp;#34;fieldId&amp;#34;: 1000002,               &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,               &amp;#34;values&amp;#34;: [ 3 ]             }           ]         }       ]     }   ] } &lt;/pre&gt;  &lt;p&gt;Field ID is depends on your tracker layout, it might be differ from the example above, please check the &amp;#39;/v2/tracker/{trackerId}/field&amp;#39; API end point to get the valid ID.&lt;/p&gt; &lt;p&gt;Because of the table can handle multiple rows we need to create a &lt;i&gt;trackerItemTableFieldValue&lt;/i&gt; container with rows. First column is a integer field with &lt;b&gt;1000001&lt;/b&gt;, type is set to to &lt;i&gt;integerFieldValue&lt;/i&gt;, value is set to 5. In case you want to trigger a validation message, please set the value 11 or more. Second column is a choice option column, type is set to &lt;i&gt;optionChoiceFieldValue&lt;/i&gt;, value is set to IDs of option1 and option3. &lt;/p&gt;&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;
     * @param trackerId  (required)
     * @param createTrackerItem  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2TrackerTrackerIdItemPostAsync(Integer trackerId, CreateTrackerItem createTrackerItem, final ApiCallback<TrackerItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2TrackerTrackerIdItemPostValidateBeforeCall(trackerId, createTrackerItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
