/*
 * codeBeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.demo;

import com.intland.swagger.ApiException;
import org.openapitools.client.model.BadRequestException;
import org.openapitools.client.model.CreateTrackerItem;
import org.openapitools.client.model.InternalServerErrorException;
import org.openapitools.client.model.ResourceForbiddenException;
import org.openapitools.client.model.ResourceNotFoundException;
import org.openapitools.client.model.TrackerItem;
import org.openapitools.client.model.TrackerItemSearchResult;
import org.openapitools.client.model.UpdateTrackerItem;
import org.openapitools.client.model.UpdateTrackerItemField;
import org.openapitools.client.model.UpdateTrackerItemTableField;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TrackerItemApi
 */
@Ignore
public class TrackerItemApiTest {

    private final TrackerItemApi api = new TrackerItemApi();

    
    /**
     * Get tracker items by cbQL query string
     *
     * API can be called with a complex cbQL string to find tracker items
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v2ItemGetTest() throws ApiException {
        Integer page = null;
        String queryString = null;
        Integer pageSize = null;
        TrackerItemSearchResult response = api.v2ItemGet(page, queryString, pageSize);

        // TODO: test validations
    }
    
    /**
     * Delete tracker item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v2ItemItemIdDeleteTest() throws ApiException {
        Integer itemId = null;
        TrackerItem response = api.v2ItemItemIdDelete(itemId);

        // TODO: test validations
    }
    
    /**
     * Update field of tracker item
     *
     * &lt;div class&#x3D;\&quot;wrap-collabsible\&quot;&gt;   &lt;input id&#x3D;\&quot;collapsible-f6141a91-e26c-42b1-bc23-d291a672be99\&quot; class&#x3D;\&quot;toggle\&quot; type&#x3D;\&quot;checkbox\&quot;&gt;   &lt;label for&#x3D;\&quot;collapsible-f6141a91-e26c-42b1-bc23-d291a672be99\&quot; class&#x3D;\&quot;lbl-toggle\&quot;&gt;Examples&lt;/label&gt;   &lt;div class&#x3D;\&quot;collapsible-content\&quot;&gt;     &lt;div class&#x3D;\&quot;content-inner\&quot;&gt; &lt;p&gt;&lt;u&gt;&lt;b&gt;How to update multiple fields of a tracker item&lt;/b&gt;&lt;/u&gt;&lt;/p&gt; &lt;p&gt;Examples of this end point are going to use the Task tracker of Intland Software&amp;#39;s Scrum&lt;/p&gt; &lt;p&gt;Please create a 2 new custom fields in your tracker, one of them should be a integer custom field with 0 min and 10 max value, other one should be a choice field with option1, option2, and option3 choice options and also create a table field with 2 new column in your tracker, one of them should be a integer custom field with 0 min and 10 max value, other one should be a choice field with option1, option2, and option3 choice options&lt;/p&gt; &lt;p&gt;Use the following JSON request&lt;/p&gt; &lt;pre&gt; {   &amp;#34;fieldValues&amp;#34;: [     {       &amp;#34;fieldId&amp;#34;: 10001,       &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;,       &amp;#34;value&amp;#34;: 4     },     {       &amp;#34;fieldId&amp;#34;: 1000,       &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,       &amp;#34;values&amp;#34;: [ 2 ]     }   ],   &amp;#34;tableValues&amp;#34;: [     {       &amp;#34;fieldId&amp;#34;: 1000000,       &amp;#34;type&amp;#34;: &amp;#34;trackerItemTableFieldValue&amp;#34;,       &amp;#34;rows&amp;#34;: [         {           &amp;#34;fieldValues&amp;#34;: [             {               &amp;#34;fieldId&amp;#34;: 1000001,               &amp;#34;value&amp;#34;: 4,               &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;             },             {               &amp;#34;fieldId&amp;#34;: 1000002,               &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,               &amp;#34;values&amp;#34;: [ 1 ]             }           ]         },         {           &amp;#34;fieldValues&amp;#34;: [             {               &amp;#34;fieldId&amp;#34;: 1000001,               &amp;#34;value&amp;#34;: 7,               &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;             },             {               &amp;#34;fieldId&amp;#34;: 1000002,               &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,               &amp;#34;values&amp;#34;: [ 2 ]             }           ]         }       ]     }   ] } &lt;/pre&gt; &lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v2ItemItemIdFieldPutTest() throws ApiException {
        Integer itemId = null;
        UpdateTrackerItemField updateTrackerItemField = null;
        TrackerItem response = api.v2ItemItemIdFieldPut(itemId, updateTrackerItemField);

        // TODO: test validations
    }
    
    /**
     * Update table field of tracker item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v2ItemItemIdFieldTableTableFieldIdPutTest() throws ApiException {
        Integer itemId = null;
        Integer tableFieldId = null;
        UpdateTrackerItemTableField updateTrackerItemTableField = null;
        TrackerItem response = api.v2ItemItemIdFieldTableTableFieldIdPut(itemId, tableFieldId, updateTrackerItemTableField);

        // TODO: test validations
    }
    
    /**
     * Get basic tracker item
     *
     * API can be used for fetching basic information of a tracker item
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v2ItemItemIdGetTest() throws ApiException {
        Integer itemId = null;
        TrackerItem response = api.v2ItemItemIdGet(itemId);

        // TODO: test validations
    }
    
    /**
     * Update tracker item
     *
     * &lt;div class&#x3D;\&quot;wrap-collabsible\&quot;&gt;   &lt;input id&#x3D;\&quot;collapsible-99fff6a0-581d-469c-be54-11b4224cdc0e\&quot; class&#x3D;\&quot;toggle\&quot; type&#x3D;\&quot;checkbox\&quot;&gt;   &lt;label for&#x3D;\&quot;collapsible-99fff6a0-581d-469c-be54-11b4224cdc0e\&quot; class&#x3D;\&quot;lbl-toggle\&quot;&gt;Examples&lt;/label&gt;   &lt;div class&#x3D;\&quot;collapsible-content\&quot;&gt;     &lt;div class&#x3D;\&quot;content-inner\&quot;&gt; &lt;p&gt;Please check the &amp;#39;Create tracker item&amp;#39; end point for examples&lt;/p&gt;&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v2ItemItemIdPutTest() throws ApiException {
        Integer itemId = null;
        UpdateTrackerItem updateTrackerItem = null;
        TrackerItem response = api.v2ItemItemIdPut(itemId, updateTrackerItem);

        // TODO: test validations
    }
    
    /**
     * Create a tracker item with parent
     *
     * &lt;div class&#x3D;\&quot;wrap-collabsible\&quot;&gt;   &lt;input id&#x3D;\&quot;collapsible-f684e99b-9aa3-49de-9cd0-0a757237d85d\&quot; class&#x3D;\&quot;toggle\&quot; type&#x3D;\&quot;checkbox\&quot;&gt;   &lt;label for&#x3D;\&quot;collapsible-f684e99b-9aa3-49de-9cd0-0a757237d85d\&quot; class&#x3D;\&quot;lbl-toggle\&quot;&gt;Examples&lt;/label&gt;   &lt;div class&#x3D;\&quot;collapsible-content\&quot;&gt;     &lt;div class&#x3D;\&quot;content-inner\&quot;&gt; &lt;p&gt;Please check the &amp;#39;Create tracker item&amp;#39; end point for examples&lt;/p&gt;&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v2TrackerTrackerIdItemParentItemIdPostTest() throws ApiException {
        Integer trackerId = null;
        Integer parentItemId = null;
        CreateTrackerItem createTrackerItem = null;
        TrackerItem response = api.v2TrackerTrackerIdItemParentItemIdPost(trackerId, parentItemId, createTrackerItem);

        // TODO: test validations
    }
    
    /**
     * Create a tracker item
     *
     * &lt;div class&#x3D;\&quot;wrap-collabsible\&quot;&gt;   &lt;input id&#x3D;\&quot;collapsible-3fc73f9f-172d-46fc-a6cf-f33d51de0695\&quot; class&#x3D;\&quot;toggle\&quot; type&#x3D;\&quot;checkbox\&quot;&gt;   &lt;label for&#x3D;\&quot;collapsible-3fc73f9f-172d-46fc-a6cf-f33d51de0695\&quot; class&#x3D;\&quot;lbl-toggle\&quot;&gt;Examples&lt;/label&gt;   &lt;div class&#x3D;\&quot;collapsible-content\&quot;&gt;     &lt;div class&#x3D;\&quot;content-inner\&quot;&gt; &lt;p&gt;&lt;u&gt;&lt;b&gt;How to create a tracker item with basic information&lt;/b&gt;&lt;/u&gt;&lt;/p&gt; &lt;p&gt;Examples of this end point are going to use the Task tracker of Intland Software&amp;#39;s Scrum&lt;/p&gt; &lt;p&gt;&lt;u&gt;&lt;b&gt;Create a tracker image with commonly used fields&lt;/b&gt;&lt;/u&gt;&lt;/p&gt; &lt;p&gt;Please use the following JSON request&lt;/p&gt; &lt;pre&gt; {   &amp;#34;name&amp;#34;: &amp;#34;My first tracker item&amp;#34;,   &amp;#34;description&amp;#34;: &amp;#34;I love this API&amp;#34;,   &amp;#34;storyPoints&amp;#34;: 42,   &amp;#34;startDate&amp;#34;: &amp;#34;2018-11-19T15:13:34.223Z&amp;#34;,   &amp;#34;endDate&amp;#34;: &amp;#34;2018-11-19T15:13:34.223Z&amp;#34;,   &amp;#34;estimatedMillis&amp;#34;: 42000,   &amp;#34;status&amp;#34;: {     &amp;#34;fieldId&amp;#34;: 7,     &amp;#34;type&amp;#34;: &amp;#34;singleOptionChoiceFieldValue&amp;#34;,     &amp;#34;value&amp;#34;: 1   },   &amp;#34;priority&amp;#34;: {     &amp;#34;fieldId&amp;#34;: 2,     &amp;#34;type&amp;#34;: &amp;#34;singleOptionChoiceFieldValue&amp;#34;,     &amp;#34;value&amp;#34;: 2   },   &amp;#34;severities&amp;#34;: {     &amp;#34;fieldId&amp;#34;: 14,     &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,     &amp;#34;values&amp;#34;: [3]   },   &amp;#34;assignees&amp;#34;: [     {       &amp;#34;fieldId&amp;#34;: 5,       &amp;#34;type&amp;#34;: &amp;#34;userFieldValue&amp;#34;,       &amp;#34;value&amp;#34;: 1     }   ] } &lt;/pre&gt;  &lt;p&gt;Status / priority field only handles one option, because of that we need to use the &lt;i&gt;singleOptionChoiceFieldValue&lt;/i&gt; as a type of the field, value of the field is one of the ID of the available options, please check the &amp;#39;/v2/tracker/{trackerId}/field&amp;#39; API end point to see all values. In this case we want to set the status to &lt;b&gt;New&lt;/b&gt;, which is ID 1, and set the priority to &lt;b&gt;High&lt;/b&gt;, which is ID 2.&lt;/p&gt; &lt;p&gt;Severities is a multiple option field, it can handle multiple options, because of the we need to use the &lt;i&gt;optionChoiceFieldValue&lt;/i&gt; as a type of the field, values of the field is one or more of the IDs of the available options. In this case we want to set the Severities to &amp;#34;Minor&amp;#34;, which is ID 3&lt;/p&gt; &lt;p&gt;Tracker item can be assigned to multiple users, in this case use only on user with ID 1. Please note that user must be assigned to the project.&lt;/p&gt; &lt;p&gt;&lt;u&gt;&lt;b&gt;Create a tracker image with custom fields&lt;/b&gt;&lt;/u&gt;&lt;/p&gt; &lt;p&gt;Please create a 2 new custom fields in your tracker, one of them should be a integer custom field with 0 min and 10 max value, other one should be a choice field with option1, option2, and option3 choice options&lt;/p&gt; &lt;p&gt;Use the following JSON request to create a tracker item&lt;/p&gt; &lt;pre&gt; {   &amp;#34;name&amp;#34;: &amp;#34;My first tracker item with custom field&amp;#34;,   &amp;#34;description&amp;#34;: &amp;#34;I love this API&amp;#34;,   &amp;#34;customFieldValues&amp;#34;: [     {       &amp;#34;fieldId&amp;#34;: 10001,       &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;,       &amp;#34;value&amp;#34;: 5     },     {       &amp;#34;fieldId&amp;#34;: 1000,       &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,       &amp;#34;values&amp;#34;: [ 1, 3 ]     }   ] } &lt;/pre&gt;  &lt;p&gt;Field ID is depends on your tracker layout, it might be differ from the example above, please check the &amp;#39;/v2/tracker/{trackerId}/field&amp;#39; API end point to get the valid ID.&lt;/p&gt; &lt;p&gt;Because of the &lt;b&gt;10001&lt;/b&gt; field is a integer field, type is set to to &lt;i&gt;integerFieldValue&lt;/i&gt;, value is set to 5. In case you want to trigger a validation message, please set the value 11 or more.&lt;/p&gt; &lt;p&gt;We want to set the option1 and option3 values for &lt;b&gt;1000&lt;/b&gt; choice field, to do that we need to use &lt;i&gt;optionChoiceFieldValue&lt;/i&gt; type, and ID of option1 and option3&lt;/p&gt; &lt;p&gt;&lt;u&gt;&lt;b&gt;Create a tracker image with custom table field&lt;/b&gt;&lt;/u&gt;&lt;/p&gt; &lt;p&gt;Please create a table field with 2 new column in your tracker, one of them should be a integer custom field with 0 min and 10 max value, other one should be a choice field with option1, option2, and option3 choice options&lt;/p&gt; &lt;p&gt;Use the following JSON request to create a tracker item&lt;/p&gt; &lt;pre&gt; {   &amp;#34;name&amp;#34;: &amp;#34;My first tracker item with table field&amp;#34;,   &amp;#34;description&amp;#34;: &amp;#34;I love this API&amp;#34;,   &amp;#34;tableValues&amp;#34;: [     {       &amp;#34;fieldId&amp;#34;: 1000000,       &amp;#34;type&amp;#34;: &amp;#34;trackerItemTableFieldValue&amp;#34;,       &amp;#34;rows&amp;#34;: [         {           &amp;#34;fieldValues&amp;#34;: [             {               &amp;#34;fieldId&amp;#34;: 1000001,               &amp;#34;value&amp;#34;: 5,               &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;             },             {               &amp;#34;fieldId&amp;#34;: 1000002,               &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,               &amp;#34;values&amp;#34;: [ 1, 2 ]             }           ]         },         {           &amp;#34;fieldValues&amp;#34;: [             {               &amp;#34;fieldId&amp;#34;: 1000001,               &amp;#34;value&amp;#34;: 6,               &amp;#34;type&amp;#34;: &amp;#34;integerFieldValue&amp;#34;             },             {               &amp;#34;fieldId&amp;#34;: 1000002,               &amp;#34;type&amp;#34;: &amp;#34;optionChoiceFieldValue&amp;#34;,               &amp;#34;values&amp;#34;: [ 3 ]             }           ]         }       ]     }   ] } &lt;/pre&gt;  &lt;p&gt;Field ID is depends on your tracker layout, it might be differ from the example above, please check the &amp;#39;/v2/tracker/{trackerId}/field&amp;#39; API end point to get the valid ID.&lt;/p&gt; &lt;p&gt;Because of the table can handle multiple rows we need to create a &lt;i&gt;trackerItemTableFieldValue&lt;/i&gt; container with rows. First column is a integer field with &lt;b&gt;1000001&lt;/b&gt;, type is set to to &lt;i&gt;integerFieldValue&lt;/i&gt;, value is set to 5. In case you want to trigger a validation message, please set the value 11 or more. Second column is a choice option column, type is set to &lt;i&gt;optionChoiceFieldValue&lt;/i&gt;, value is set to IDs of option1 and option3. &lt;/p&gt;&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v2TrackerTrackerIdItemPostTest() throws ApiException {
        Integer trackerId = null;
        CreateTrackerItem createTrackerItem = null;
        TrackerItem response = api.v2TrackerTrackerIdItemPost(trackerId, createTrackerItem);

        // TODO: test validations
    }
    
}
